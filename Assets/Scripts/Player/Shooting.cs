using System.Collections;using System.Collections.Generic;using UnityEngine;using System;public class Shooting : MonoBehaviour{    [SerializeField] private GameObject bullet;    public GameObject plane;    public float velocity = 10f;    public float fireRate = 0.1f;    private WaitForSeconds fireCooldown;    private bool canShoot = true, canBomb = true;    private PauseMenu pauseMenuScript;    // powerups    private int bombsLeft = 0;  // number of bomb powerups currently in the player's inventory    private WaitForSeconds bombCooldown = new WaitForSeconds(10f);    public static event Action BombUsed;    void Awake()    {        pauseMenuScript = FindObjectOfType<PauseMenu>();        fireCooldown = new WaitForSeconds(fireRate);    }    private void OnEnable()    {        BombPowerup.BombCollected += CollectBomb;    }    private void OnDisable()    {        BombPowerup.BombCollected -= CollectBomb;    }    void Update()    {        ShootBullet();        UseBomb();    }    private void ShootBullet()    {        if (Input.GetButton("Fire1") && canShoot && !pauseMenuScript.IsPaused)        {            //Rigidbody newBullet = Instantiate(bullet, transform.position, bullet.rotation) as Rigidbody;            Rigidbody newBullet = SpawnManager.instance.SpawnPlayerBullet(this.transform.position) as Rigidbody;            InvokeRepeating("Update", 10f, fireRate);            newBullet.AddForce(transform.forward * velocity, ForceMode.VelocityChange);            AudioManager.instance.PlayClip("PlayerShoot");            StartCoroutine(ShootCooldown());        }    }    private void CollectBomb()    {        bombsLeft++;    }    private void UseBomb()    {        if (Input.GetKeyDown(KeyCode.R) && bombsLeft != 0 && canBomb)        {            // clear all enemies from the screen            SpawnManager.instance.ClearAllEnemies();            // call coroutine for bomb cooldown (so that it's not spammable)            StartCoroutine(BombCooldown());            // decrement bombs left            bombsLeft--;            BombUsed?.Invoke();        }    }    private IEnumerator ShootCooldown()    {        canShoot = false;        yield return fireCooldown;        canShoot = true;    }    private IEnumerator BombCooldown()    {        canBomb = false;        yield return bombCooldown;        canBomb = true;    }}